swagger: "2.0"
info:
  version: "0.0.1"
  title: Swagger JWT Example
host: localhost:3000
basePath: /api
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json
paths:

  /login:
    x-swagger-router-controller: auth-controller
    post:
      tags : 
        - Authentication
      summary : user & admin login
      operationId: login
      description: "Login with a particular role"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /signup:
    x-swagger-router-controller: auth-controller
    post:
      operationId: newUser
      description: "new user signup"
      parameters:
        - name: User data
          in: body
          required: true
          schema:
            $ref: "#/definitions/NewUser"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "406":
          description: "Not Acceptable"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"

  /protected:
    x-swagger-router-controller: main-controller
    get:
      operationId: protectedGet
      description: "Protected endpoint, only accessible to 'admins' and 'users'"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /protected2:
    x-swagger-router-controller: main-controller
    get:
      operationId: protected2Get
      description: "Protected endpoint, only accessible to 'admins'"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  NewUser:
    type: object
    properties:
      firstName:
        type: string
        example: "firstName"
      lastName:
        type: string
        example: "lastName"
      email:
        type: string
        format: email
        example: "email"
      dob:
        type: string
        format: date
        pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
        example: "1972-06-30"
      password:
        type: string
        example: "password"
      confirm-password:
        type: string
        example: "password"
      termsCond:
        type: boolean
        example: true
    required:
      - firstName
      - lastName
        
  Resource:
    type: object
    properties:
      code:
        type: integer
      message1:
        type: string
      message2:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
      message1:
        type: string
      message2:
        type: string
